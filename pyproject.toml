[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "informer-option-pricing"
version = "0.1.0"
description = "Informer model for option pricing prediction with advanced time series forecasting"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Team", email = "team@example.com"},
]
keywords = ["deep-learning", "time-series", "transformer", "options", "finance"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    "torch>=2.0.1",
    "pandas>=2.0.3",
    "scikit-learn>=1.3.0",
    "xformers>=0.0.21",
    "pydantic>=2.5.2",
    "mlflow>=2.8.0",
    "matplotlib>=3.7.3",
    "numpy>=1.24.0",
    "tqdm>=4.65.0",
    "tensorboard>=2.13.0",
    "hydra-core>=1.3.0",
    "omegaconf>=2.3.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "nbformat>=5.0.0",
    "types-PyYAML>=6.0.0",
]

profiling = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
    "nvidia-ml-py>=12.0.0",
]

optimization = [
    "optuna>=3.0.0",
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
    "torch-tb-profiler>=0.4.0",
]

[project.urls]
Homepage = "https://github.com/username/informer-option-pricing"
Repository = "https://github.com/username/informer-option-pricing"
Documentation = "https://informer-option-pricing.readthedocs.io"
Issues = "https://github.com/username/informer-option-pricing/issues"

[project.scripts]
train-informer = "scripts.train:main"
predict-informer = "scripts.predict:main"
profile-informer = "scripts.profile:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*", "notebooks*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | experiments
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_glob = ["*/__pycache__/*", "*/build/*", "*/dist/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E266", "E501", "W503", "F403", "F401"]
max-complexity = 10
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    "experiments",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "mlflow.*",
    "xformers.*",
    "matplotlib.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "experiments/*",
    "notebooks/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "B008",    # do not perform function calls in argument defaults
    "B011",    # do not call assert False
    "FBT003",  # boolean positional value in function call
    "S101",    # use of assert detected
    "S102",    # use of exec detected
    "S103",    # Subprocess call
    "S108",    # hardcoded temp file
    "S301",    # pickle usage
    "S311",    # random usage
    "S608",    # SQL injection
    "ARG002",  # unused method argument
    "ARG001",  # unused function argument
    "C901",    # too complex
    "PLR0915", # too many statements
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "PLR2004", # magic values
]

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "PLR2004",
    "S101",
    "TID252",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["src"]
force-single-line = true